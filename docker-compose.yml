services:
  users_db:
    image: postgres:latest
    container_name: users_db
    restart: always
    environment:
      POSTGRES_DB: users_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - users_pg_data:/var/lib/postgresql/data
    networks:
      - app_network

  posts_db:
    image: postgres:latest
    container_name: posts_db
    restart: always
    environment:
      POSTGRES_DB: posts_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - posts_pg_data:/var/lib/postgresql/data
    networks:
      - app_network

  user_service:
    build: 
      context: ./User
    container_name: user_service
    restart: always
    depends_on:
      - users_db
    environment:
      DATABASE_URL: postgresql://postgres:password@users_db:5432/users_db
      SECRET_KEY: your_secret_key
    ports:
      - "5001:5001"
    networks:
      - app_network

  post_service:
    build: 
      context: ./Post_Service
    container_name: post_service
    restart: always
    depends_on:
      - posts_db
    environment:
      DATABASE_URL: postgresql://postgres:password@posts_db:5432/posts_db
      GRPC_PORT: 50052
    ports:
      - "50052:50052"
    networks:
      - app_network

  api_gateway:
    build: 
      context: ./API_Gateway
    container_name: api_gateway
    restart: always
    depends_on:
      - user_service
      - post_service
    environment:
      USER_SERVICE_URL: http://user_service:5001
      POST_SERVICE_URL: post_service:50052
      SECRET_KEY: your_secret_key
    ports:
      - "5000:5000"
    networks:
      - app_network

  api_gateway_tests:
    build:
      context: ./API_Gateway
      dockerfile: Dockerfile.test
    container_name: api_gateway_tests
    depends_on:
      - api_gateway
    environment:
      POST_SERVICE_URL: post_service:50052 
    networks:
      - app_network

  post_service_tests:
    build:
      context: ./Post_Service
      dockerfile: Dockerfile.test
    container_name: post_service_tests
    depends_on:
      - post_service
    environment:
      GRPC_PORT: 50052
    networks:
      - app_network

volumes:
  users_pg_data:
  posts_pg_data:

networks:
  app_network:
    driver: bridge
